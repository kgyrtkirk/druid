# testUnnestJsonQueryArraysJsonValue@NullHandling=sql case-crc:d21c3b90
# quidem testcase reason: UNNEST_EXTRA_SCAN
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set sqlStringifyArrays false
!set outputformat mysql
!use druidtest:///?componentSupplier=NestedComponentSupplier
SELECT json_value(objects, '$.x' returning bigint) as x, count(*) FROM druid.arrays, UNNEST(JSON_QUERY_ARRAY(arrayObject, '$')) as u(objects) GROUP BY 1;
+------+--------+
| x    | EXPR$1 |
+------+--------+
|    1 |      4 |
| 1000 |      2 |
|    2 |      8 |
|    3 |      2 |
|    4 |      2 |
|      |     10 |
+------+--------+
(6 rows)

!ok
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
  LogicalProject(x=[JSON_VALUE_BIGINT($13, '$.x')])
    LogicalUnnest(unnestExpr=[$12])
      LogicalProject(__time=[$0], arrayString=[$1], arrayStringNulls=[$2], arrayLong=[$3], arrayLongNulls=[$4], arrayDouble=[$5], arrayDoubleNulls=[$6], arrayVariant=[$7], arrayNoType=[$8], arrayNestedLong=[$9], arrayObject=[$10], cnt=[$11], $f12=[JSON_QUERY_ARRAY($10, '$')])
        LogicalTableScan(table=[[druid, arrays]])

!logicalPlan
DruidAggregate(group=[{0}], EXPR$1=[COUNT()], druid=[logical])
  DruidProject(x=[JSON_VALUE_BIGINT($13, '$.x')], druid=[logical])
    DruidUnnest(unnestExpr=[$12])
      DruidProject(__time=[$0], arrayString=[$1], arrayStringNulls=[$2], arrayLong=[$3], arrayLongNulls=[$4], arrayDouble=[$5], arrayDoubleNulls=[$6], arrayVariant=[$7], arrayNoType=[$8], arrayNestedLong=[$9], arrayObject=[$10], cnt=[$11], $f12=[JSON_QUERY_ARRAY($10, '$')], druid=[logical])
        DruidTableScan(table=[[druid, arrays]], druid=[logical])

!druidPlan
{
  "queryType" : "groupBy",
  "dataSource" : {
    "type" : "unnest",
    "base" : {
      "type" : "query",
      "query" : {
        "queryType" : "scan",
        "dataSource" : {
          "type" : "table",
          "name" : "arrays"
        },
        "intervals" : {
          "type" : "intervals",
          "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
        },
        "virtualColumns" : [ {
          "type" : "expression",
          "name" : "v0",
          "expression" : "json_query_array(\"arrayObject\",'$')",
          "outputType" : "ARRAY<COMPLEX<json>>"
        } ],
        "resultFormat" : "compactedList",
        "columns" : [ "__time", "arrayDouble", "arrayDoubleNulls", "arrayLong", "arrayLongNulls", "arrayNestedLong", "arrayNoType", "arrayObject", "arrayString", "arrayStringNulls", "arrayVariant", "cnt", "v0" ],
        "columnTypes" : [ "LONG", "ARRAY<DOUBLE>", "ARRAY<DOUBLE>", "ARRAY<LONG>", "ARRAY<LONG>", "COMPLEX<json>", "ARRAY<LONG>", "COMPLEX<json>", "ARRAY<STRING>", "ARRAY<STRING>", "ARRAY<STRING>", "LONG", "ARRAY<COMPLEX<json>>" ],
        "granularity" : {
          "type" : "all"
        },
        "legacy" : false
      }
    },
    "virtualColumn" : {
      "type" : "expression",
      "name" : "j0.unnest",
      "expression" : "\"v0\"",
      "outputType" : "ARRAY<COMPLEX<json>>"
    },
    "unnestFilter" : null
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "virtualColumns" : [ {
    "type" : "nested-field",
    "columnName" : "j0.unnest",
    "outputName" : "_v0",
    "expectedType" : "LONG",
    "pathParts" : [ {
      "type" : "field",
      "field" : "x"
    } ],
    "processFromRaw" : false
  } ],
  "granularity" : {
    "type" : "all"
  },
  "dimensions" : [ {
    "type" : "default",
    "dimension" : "_v0",
    "outputName" : "d0",
    "outputType" : "LONG"
  } ],
  "aggregations" : [ {
    "type" : "count",
    "name" : "a0"
  } ],
  "limitSpec" : {
    "type" : "NoopLimitSpec"
  }
}
!nativePlan
