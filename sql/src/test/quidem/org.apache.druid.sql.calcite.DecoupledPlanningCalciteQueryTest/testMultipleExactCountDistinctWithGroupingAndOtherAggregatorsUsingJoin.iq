# testMultipleExactCountDistinctWithGroupingAndOtherAggregatorsUsingJoin case-crc:fe942fc3
# quidem testcase reason: AGG_COL_EXCHANGE
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set useApproximateCountDistinct false
!set outputformat mysql
!use druidtest:///
SELECT dim2, COUNT(*), COUNT(distinct dim1), COUNT(distinct cnt) FROM druid.foo GROUP BY dim2;
+------+--------+--------+--------+
| dim2 | EXPR$1 | EXPR$2 | EXPR$3 |
+------+--------+--------+--------+
|      |      1 |      1 |      1 |
| a    |      2 |      2 |      1 |
| abc  |      1 |      1 |      1 |
|      |      2 |      2 |      1 |
+------+--------+--------+--------+
(4 rows)

!ok
LogicalProject(dim2=[$0], EXPR$1=[$1], EXPR$2=[$3], EXPR$3=[$5])
  LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $4)], joinType=[inner])
    LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $2)], joinType=[inner])
      LogicalAggregate(group=[{2}], EXPR$1=[COUNT()])
        LogicalTableScan(table=[[druid, foo]])
      LogicalAggregate(group=[{1}], EXPR$2=[COUNT($0)])
        LogicalAggregate(group=[{1, 2}])
          LogicalTableScan(table=[[druid, foo]])
    LogicalAggregate(group=[{0}], EXPR$3=[COUNT($1)])
      LogicalAggregate(group=[{2, 4}])
        LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidProject(dim2=[$0], EXPR$1=[$1], EXPR$2=[$3], EXPR$3=[$5], druid=[logical])
  DruidJoin(condition=[IS NOT DISTINCT FROM($0, $4)], joinType=[inner])
    DruidJoin(condition=[IS NOT DISTINCT FROM($0, $2)], joinType=[inner])
      DruidAggregate(group=[{2}], EXPR$1=[COUNT()], druid=[logical])
        DruidTableScan(table=[[druid, foo]], druid=[logical])
      DruidAggregate(group=[{1}], EXPR$2=[COUNT($0)], druid=[logical])
        DruidAggregate(group=[{1, 2}], druid=[logical])
          DruidTableScan(table=[[druid, foo]], druid=[logical])
    DruidAggregate(group=[{0}], EXPR$3=[COUNT($1)], druid=[logical])
      DruidAggregate(group=[{2, 4}], druid=[logical])
        DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
