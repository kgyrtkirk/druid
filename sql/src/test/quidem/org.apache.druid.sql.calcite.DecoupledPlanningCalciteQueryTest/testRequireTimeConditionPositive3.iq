# testRequireTimeConditionPositive3 case-crc:b2fa38cc
# quidem testcase reason: JOIN_FILTER_LOCATIONS
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set requireTimeCondition true
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
SELECT COUNT(*) FROM druid.foo
WHERE __time >= '2000-01-01' AND SUBSTRING(dim2, 1, 1) IN (
  SELECT SUBSTRING(dim1, 1, 1) FROM druid.foo
  WHERE dim1 <> '' AND __time >= '2000-01-01'
);
+--------+
| EXPR$0 |
+--------+
|      3 |
+--------+
(1 row)

!ok
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    LogicalProject($f2=[SUBSTRING($2, 1, 1)])
      LogicalFilter(condition=[>=($0, 2000-01-01 00:00:00)])
        LogicalTableScan(table=[[druid, foo]])
    LogicalAggregate(group=[{0}])
      LogicalProject(EXPR$0=[SUBSTRING($1, 1, 1)])
        LogicalFilter(condition=[AND(<>($1, ''), >=($0, 2000-01-01 00:00:00))])
          LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidAggregate(group=[{}], EXPR$0=[COUNT()], druid=[logical])
  DruidJoin(condition=[=($0, $1)], joinType=[inner])
    DruidProject($f2=[SUBSTRING($2, 1, 1)], druid=[logical])
      DruidFilter(condition=[>=($0, 2000-01-01 00:00:00)])
        DruidTableScan(table=[[druid, foo]], druid=[logical])
    DruidAggregate(group=[{0}], druid=[logical])
      DruidProject(EXPR$0=[SUBSTRING($1, 1, 1)], druid=[logical])
        DruidFilter(condition=[AND(<>($1, ''), >=($0, 2000-01-01 00:00:00))])
          DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
