# testWindowingWithScanAndSort case-crc:5c468b93
# quidem testcase reason: SLIGHTLY_WORSE_PLAN
!set debug true
!set defaultTimeout 300000
!set maxScatterGatherBytes 9223372036854775807
!set plannerStrategy DECOUPLED
!set sqlCurrentTimestamp 2000-01-01T00:00:00Z
!set sqlQueryId dummy
!set outputformat mysql
!use druidtest:///
with t AS (
SELECT  
    RANK() OVER (PARTITION BY m2 ORDER BY m2 ASC) 
      AS ranking,
    COUNT(m1) as trend_score
FROM foo
GROUP BY m2,m1 LIMIT 10
)
select ranking, trend_score from t ORDER BY trend_score;
+---------+-------------+
| ranking | trend_score |
+---------+-------------+
|       1 |           1 |
|       1 |           1 |
|       1 |           1 |
|       1 |           1 |
|       1 |           1 |
|       1 |           1 |
+---------+-------------+
(6 rows)

!ok
LogicalProject(ranking=[$2], trend_score=[$1])
  LogicalSort(sort0=[$1], dir0=[ASC])
    LogicalSort(fetch=[10])
      LogicalWindow(window#0=[window(partition {0} order by [0] aggs [RANK()])])
        LogicalProject(m2=[$1], trend_score=[$2])
          LogicalAggregate(group=[{5, 6}], trend_score=[COUNT($5)])
            LogicalTableScan(table=[[druid, foo]])

!logicalPlan
DruidProject(ranking=[$2], trend_score=[$1], druid=[logical])
  DruidSort(sort0=[$1], dir0=[ASC], druid=[logical])
    DruidSort(fetch=[10], druid=[logical])
      DruidWindow(window#0=[window(partition {0} order by [0] aggs [RANK()])])
        DruidProject(m2=[$1], trend_score=[$2], druid=[logical])
          DruidAggregate(group=[{5, 6}], trend_score=[COUNT($5)], druid=[logical])
            DruidTableScan(table=[[druid, foo]], druid=[logical])

!druidPlan
