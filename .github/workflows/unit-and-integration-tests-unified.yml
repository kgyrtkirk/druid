# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Unit & Integration tests CI"
on:
  push:
    paths-ignore:
      - '**/*.md'
      - 'dev/**'
      - 'distribution/bin/**'
      - 'docs/**'
      - 'examples/**/jupyter-notebooks/**'
      - 'web-console/**'
      - 'website/**'
    branches:
      - master
      - '[0-9]+.[0-9]+.[0-9]+' # release branches
      - '[0-9]+.[0-9]+.[0-9]+-[A-Za-z0-9]+' # release branches
  pull_request:
    paths-ignore:
      - '**/*.md'
      - 'dev/**'
      - 'distribution/bin/**'
      - 'docs/**'
      - 'examples/**/jupyter-notebooks/**'
      - 'web-console/**'
      - 'website/**'
    branches:
      - master
      - '[0-9]+.[0-9]+.[0-9]+' # release branches
      - '[0-9]+.[0-9]+.[0-9]+-[A-Za-z0-9]+' # release branches

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.run_id }}' # group workflows only on pull_requests and not on branch commits
  cancel-in-progress: true

env:
  MYSQL_DRIVER_CLASSNAME: com.mysql.jdbc.Driver # Used to set druid config in docker image for revised ITs
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5

jobs:
  set-env-var:
    name: Set env var
    runs-on: ubuntu-latest
    outputs:
      DRUID_PREVIOUS_IT_IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
      BACKWARD_COMPATIBILITY_IT_ENABLED: ${{ steps.it_enabled.outputs.enabled }}
      DRUID_PREVIOUS_VERSION: ${{ env.DRUID_PREVIOUS_VERSION }}
      DRUID_PREVIOUS_VERSION_DOWNLOAD_URL: ${{ env.DRUID_PREVIOUS_VERSION_DOWNLOAD_URL }}
    steps:
      - name: Set image name env var
        id: image_name
        run: |
          echo "::set-output name=image_name::org.apache.druid.integration-tests/test:${{ env.DRUID_PREVIOUS_VERSION }}"
      - name: Set env for enabling backward compatibility it
        id: it_enabled
        run: |
          if [ -n "${{ env.DRUID_PREVIOUS_VERSION }}" ]; then
            echo "::set-output name=enabled::true"
          else
            echo "::set-output name=enabled::false"
          fi

  build:
    needs: set-env-var
    name: "build (jdk${{ matrix.jdk }})"
    strategy:
      fail-fast: false
      matrix:
        # Use JDK 21.0.4 to work around https://github.com/apache/druid/issues/17429
        jdk: [ '11', '17', '21.0.4' ]
    runs-on: ubuntu-latest
    steps:
      - name: Maven build
        id: maven_build
        run: |
          echo ./it.sh ci

  # check if it is a PR and if it is approved. For approved PRs, we do not want to run tests sequentially
  check-approval:
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.check.outputs.isApproved }}
    steps:
      - name: Check if Triggered by a PR
        id: determine-trigger
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "isPR=true" >> $GITHUB_ENV
          else
            echo "isPR=false" >> $GITHUB_ENV
          fi

      - name: Check PR Approval (if applicable)
        id: check
        if: ${{ env.isPR == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const approved = reviews.data.some(review => review.state === 'APPROVED');
            core.setOutput("isApproved", approved);

      - name: Default to Approved for Branch
        id: default-check
        if: ${{ env.isPR == 'false' }}
        run: echo "::set-output name=isApproved::true"

  unit-tests-unapproved:
    name: "unit tests - PR unapproved"
    uses: ./.github/workflows/ci.yml
    needs: [check-approval]
    if: ${{ needs.check-approval.outputs.approved != 'true' }}

  unit-tests-approved:
    name: "unit tests - PR approved"
    uses: ./.github/workflows/ci.yml
    needs: [check-approval]
    if: ${{ needs.check-approval.outputs.approved == 'true' }}

  actions-timeline:
    needs: [build, unit-tests-approved, unit-tests-unapproved]
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    steps:
      - uses: Kesin11/actions-timeline@427ee2cf860166e404d0d69b4f2b24012bb7af4f
