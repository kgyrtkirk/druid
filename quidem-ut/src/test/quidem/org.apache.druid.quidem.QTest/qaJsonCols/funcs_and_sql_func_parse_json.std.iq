!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=StandardComponentSupplier&datasets=sql/src/test/quidem/qatests/qaJsonCols/funcs_and_sql
!set outputformat mysql
SELECT count(*) cnt
FROM test_json_cols;
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A001 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('1234') c
FROM test_json_cols;
+------+
| c    |
+------+
| 1234 |
| 1234 |
| 1234 |
| 1234 |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A002 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('"日本"') c
FROM test_json_cols;
+------+
| c    |
+------+
| "日本" |
| "日本" |
| "日本" |
| "日本" |
+------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A003 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('"abc"') c
FROM test_json_cols;
+-------+
| c     |
+-------+
| "abc" |
| "abc" |
| "abc" |
| "abc" |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A004 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('"'||'a'||'b'||'c'||'"') c
FROM test_json_cols;
+-------+
| c     |
+-------+
| "abc" |
| "abc" |
| "abc" |
| "abc" |
+-------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A005 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('"This is My Key"') c
FROM test_json_cols;
+------------------+
| c                |
+------------------+
| "This is My Key" |
| "This is My Key" |
| "This is My Key" |
| "This is My Key" |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A006 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(parse_json('"AbCd"'), '$') c
FROM test_json_cols;
+--------+
| c      |
+--------+
| "AbCd" |
| "AbCd" |
| "AbCd" |
| "AbCd" |
+--------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A007 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(s_str, '$')) c
FROM test_json_cols;
AvaticaSqlException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A008 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(1234) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A009 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(1+1) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A010 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(parse_json(1234), '$') c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A011 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(s_num_int, '$' RETURNING bigint)) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A012 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(0.1234) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A013 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(0.1+0.1) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A014 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(parse_json(0.1234), '$') c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A015 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(s_num_float, '$' RETURNING DOUBLE)) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A016 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(TRUE) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A017 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json((1=2)) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A018 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(parse_json(TRUE), '$') c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A019 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(s_bool, '$' RETURNING boolean)) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A020 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(NULL) c
FROM test_json_cols;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A021 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT json_query(parse_json(NULL), '$') c
FROM test_json_cols;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A022 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_value(s_null, '$')) c
FROM test_json_cols;
+---+
| c |
+---+
|   |
|   |
|   |
|   |
+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A023 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(__time) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A024 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(CURRENT_TIMESTAMP) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A025 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{}') c
FROM test_json_cols;
+----+
| c  |
+----+
| {} |
| {} |
| {} |
| {} |
+----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A026 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": {}}') c
FROM test_json_cols;
+------------------+
| c                |
+------------------+
| {"a":"A","b":{}} |
| {"a":"A","b":{}} |
| {"a":"A","b":{}} |
| {"a":"A","b":{}} |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A027 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('[]') c
FROM test_json_cols;
+----+
| c  |
+----+
| [] |
| [] |
| [] |
| [] |
+----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A028 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": []}') c
FROM test_json_cols;
+------------------+
| c                |
+------------------+
| {"a":"A","b":[]} |
| {"a":"A","b":[]} |
| {"a":"A","b":[]} |
| {"a":"A","b":[]} |
+------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A029 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": 1, "c": 0.1, "d": true, "e": null}') c
FROM test_json_cols;
+-------------------------------------------+
| c                                         |
+-------------------------------------------+
| {"a":"A","b":1,"c":0.1,"d":true,"e":null} |
| {"a":"A","b":1,"c":0.1,"d":true,"e":null} |
| {"a":"A","b":1,"c":0.1,"d":true,"e":null} |
| {"a":"A","b":1,"c":0.1,"d":true,"e":null} |
+-------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A030 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": [{"c": 123}, {"d": null, "e": [1, 2, 3]}]}') c
FROM test_json_cols;
+--------------------------------------------------+
| c                                                |
+--------------------------------------------------+
| {"a":"A","b":[{"c":123},{"d":null,"e":[1,2,3]}]} |
| {"a":"A","b":[{"c":123},{"d":null,"e":[1,2,3]}]} |
| {"a":"A","b":[{"c":123},{"d":null,"e":[1,2,3]}]} |
| {"a":"A","b":[{"c":123},{"d":null,"e":[1,2,3]}]} |
+--------------------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A031 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(c1) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A032 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json(json_query(c1, '$.a_array[0].a_obj')) c
FROM test_json_cols;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A033 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{'a': 123}') c
FROM test_json_cols;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A034 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('"a": 123') c
FROM test_json_cols;
+-----+
| c   |
+-----+
| "a" |
| "a" |
| "a" |
| "a" |
+-----+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A035 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": 123; "b": 456}') c
FROM test_json_cols;
ExpressionProcessingException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A036 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": 123 456}') c
FROM test_json_cols;
ExpressionProcessingException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A037 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": ["c": {}, "d": {}]}') c
FROM test_json_cols;
ExpressionProcessingException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A038 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE parse_json(to_json_string(c1)) IS NULL;
+---+
| c |
+---+
| 0 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A039 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE parse_json(to_json_string(c1)) IS NOT NULL;
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A040 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT parse_json(to_json_string(c1))
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A041 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT ALL parse_json(to_json_string(c1))
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A042 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(mycol) c
FROM
  (SELECT parse_json(to_json_string(c1)) mycol
   FROM test_json_cols);
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A043 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT DISTINCT parse_json(to_json_string(c1)) c
   FROM test_json_cols);
+---+
| c |
+---+
| 2 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A044 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT parse_json(to_json_string(c1)) mycol
   FROM test_json_cols)
GROUP BY mycol;
+---+
| c |
+---+
| 2 |
| 2 |
+---+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A045 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM
  (SELECT c1,
          parse_json(to_json_string(c1)) mycol
   FROM test_json_cols)
GROUP BY mycol
HAVING mycol IS NOT NULL;
+---+
| c |
+---+
| 2 |
| 2 |
+---+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A046 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols
WHERE parse_json(to_json_string(c1)) = parse_json(to_json_string(c1));
+---+
| c |
+---+
| 4 |
+---+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A047 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
INNER JOIN test_json_cols t2 ON parse_json(to_json_string(t1.c1))=parse_json(to_json_string(t2.c1));
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A048 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1
LEFT JOIN test_json_cols t2 ON parse_json(to_json_string(t1.c1))=parse_json(to_json_string(t2.c1));
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A049 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) c
FROM test_json_cols t1,
     test_json_cols t2
WHERE parse_json(to_json_string(t1.c1))=parse_json(to_json_string(t2.c1));
Cannot join
!error

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A050 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": 123, "c": true, "d": null}') c
FROM test_json_cols
ORDER BY __time;
+-------------------------------------+
| c                                   |
+-------------------------------------+
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
+-------------------------------------+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A051 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": 123, "c": true, "d": null}') c
FROM test_json_cols
LIMIT 1;
+-------------------------------------+
| c                                   |
+-------------------------------------+
| {"a":"A","b":123,"c":true,"d":null} |
+-------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A052 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": 123, "c": true, "d": null}') c
FROM test_json_cols
OFFSET 1;
+-------------------------------------+
| c                                   |
+-------------------------------------+
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
+-------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A053 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT parse_json('{"a": "A", "b": 123, "c": true, "d": null}') c
FROM test_json_cols
UNION ALL
SELECT parse_json('{"a": "A", "b": 123, "c": true, "d": null}') c
FROM test_json_cols;
+-------------------------------------+
| c                                   |
+-------------------------------------+
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
| {"a":"A","b":123,"c":true,"d":null} |
+-------------------------------------+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_func_parse_json TEST_ID: A054 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------

SELECT parse_json(to_json_string(c1))
FROM test_json_cols;

||

| {"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]}]} |
| {"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null],"a_obj":{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},"a_array":[{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]},{"a_str":"A","a_num_int":1,"a_num_float":0.1,"a_bool":true,"a_null":null,"a_empty_obj":{},"a_empty_array":[],"a_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"a_empty_array_nested":[{},[],null]}]}]} |
| {"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null],"b_obj":{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null],"b_obj":{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},"b_array":[{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]}]},"b_array":[{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null],"b_obj":{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},"b_array":[{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]}]},{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null],"b_obj":{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},"b_array":[{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]}]}]} |
| {"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null],"b_obj":{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null],"b_obj":{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},"b_array":[{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]}]},"b_array":[{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null],"b_obj":{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},"b_array":[{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]}]},{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null],"b_obj":{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},"b_array":[{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]},{"b_str":"A","b_num_int":1,"b_num_float":0.1,"b_bool":true,"b_null":null,"b_empty_obj":{},"b_empty_array":[],"b_empty_obj_nested":{"o1":{},"o2":[],"o3":null},"b_empty_array_nested":[{},[],null]}]}]} |

(4 rows)

!ok

{
  "queryType" : "scan",
  "dataSource" : {
    "type" : "table",
    "name" : "test_json_cols"
  },
  "intervals" : {
    "type" : "intervals",
    "intervals" : [ "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z" ]
  },
  "virtualColumns" : [ {
    "type" : "expression",
    "name" : "v0",
    "expression" : "parse_json(to_json_string(\"c1\"))",
    "outputType" : "COMPLEX<json>"
  } ],
  "resultFormat" : "compactedList",
  "columns" : [ "v0" ],
  "columnTypes" : [ "COMPLEX<json>" ],
  "granularity" : {
    "type" : "all"
  },
  "legacy" : false
}
!nativePlan

#-------------------------------------------------------------------------
# Total query count 55 Positive tests: 29 Negative tests: 26
#-------------------------------------------------------------------------
