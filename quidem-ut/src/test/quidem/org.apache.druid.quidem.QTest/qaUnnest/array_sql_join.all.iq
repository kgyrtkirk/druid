!set dartQueryId 00000000-0000-0000-0000-000000000000
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=AllDruidEnginesComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
INNER JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
INNER JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
INNER JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
INNER JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
INNER JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A1_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
INNER JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN test_unnest t2,
     unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest t2,
     unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest t2,
     unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest t2,
     unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest t2,
     unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest,
     unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest,
     unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest,
     unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
JOIN test_unnest,
     unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN test_unnest t2,
     unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest t2,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
JOIN test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A2_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN test_unnest t2,
          unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
LEFT JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN test_unnest t2,
          unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
LEFT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
LEFT JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
LEFT JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A3_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
LEFT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
RIGHT JOIN test_unnest,
           unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
RIGHT JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
RIGHT JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest t2,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
RIGHT JOIN test_unnest,
           unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A4_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
RIGHT JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
FULL JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN test_unnest t2,
          unnest(t2.a_int) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest t2,
          unnest(a_int) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(a_int) AS u(c)
FULL JOIN test_unnest,
          unnest(a_int) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2 ON u.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C3 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN test_unnest t2,
          unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t2.s_int=u.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
FULL JOIN test_unnest t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     2 | 1 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.s_int=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 2 |
|     1 |   |
|     2 | 1 |
|     2 | 2 |
|     2 |   |
+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
FULL JOIN t2 ON t2.c=t1.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C12 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C13 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C14 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C15 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest t2,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
FULL JOIN test_unnest,
          unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u(c) ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.s_int=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.s_int
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.s_int=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A5_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
FULL JOIN t1 t2 ON t1.c=t2.c
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.a_int) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.a_int) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+----+
| s_int | c1 |
+-------+----+
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  1 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |  2 |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     1 |    |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  1 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |  2 |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
|     2 |    |
+-------+----+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN test_unnest t2,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C3 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C7 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       c1
FROM test_unnest t1
CROSS JOIN unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest t2
CROSS JOIN unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A6_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999);
+-------+---+
| s_int | c |
+-------+---+
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 1 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 | 2 |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     1 |   |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 1 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 | 2 |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
|     2 |   |
+-------+---+
(36 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t2.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(a_int) AS u(c),
           test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM (test_unnest t1
      CROSS JOIN unnest(a_int) AS u(c))
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND u.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.c=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.c=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.a_int) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.a_int) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c1=t2.s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.a_int) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.a_int) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.a_int) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c1=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B1_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(a_int) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t2.s_int,
       c
FROM test_unnest t1
CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c),
           test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM (test_unnest t1
      CROSS JOIN unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND u.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C4 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C5 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C6 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C7 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.c=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C8 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C9 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM t1
CROSS JOIN test_unnest t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C10 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 |   |
+-------+-------+---+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C11 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t2 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       c
FROM test_unnest t1
CROSS JOIN t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.c=t1.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(4 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C16 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C17 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c1=t2.s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C18 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C19 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       c1
FROM test_unnest t1,
     unnest(t1.json_value(a_nested, '$[1]' RETURNING bigint array)) AS u1(c1)
CROSS JOIN test_unnest,
           unnest(t2.json_value(a_nested, '$[1]' RETURNING bigint array)) t2 AS u2(c2)
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c1=t2.c2;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C20 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C21 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C22 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C23 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C24 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C25 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C26 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C27 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)) t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C28 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(18 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C29 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.s_int;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C30 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.s_int=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     1 |     1 |   |
|     1 |     1 |   |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
|     2 |     2 |   |
|     2 |     2 |   |
+-------+-------+---+
(12 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_join TEST_ID: A7_B2_C31 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
WITH t1 AS
  (SELECT *
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c))
SELECT t1.s_int,
       t1.s_int,
       t1.c
FROM t1
CROSS JOIN t1 t2
WHERE t1.s_int IN (0,
                   1,
                   2,
                   999)
  AND t2.s_int IN (0,
                   1,
                   2,
                   999)
  AND t1.c=t2.c;
+-------+-------+---+
| s_int | s_int | c |
+-------+-------+---+
|     1 |     1 | 1 |
|     1 |     1 | 1 |
|     1 |     1 | 2 |
|     1 |     1 | 2 |
|     2 |     2 | 1 |
|     2 |     2 | 1 |
|     2 |     2 | 2 |
|     2 |     2 | 2 |
+-------+-------+---+
(8 rows)

!ok

#-------------------------------------------------------------------------
# Total query count 463 Positive tests: 355 Negative tests: 108
#-------------------------------------------------------------------------
