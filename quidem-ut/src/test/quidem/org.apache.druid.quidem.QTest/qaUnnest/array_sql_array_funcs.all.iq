!set dartQueryId 00000000-0000-0000-0000-000000000000
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=AllDruidEnginesComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[1,
             2,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[1,
             2,
             3]<array[99999]);
+-----------+
| col       |
+-----------+
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[1,
             2,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[1,
             2,
             3]<array[99999]);
+-----------+
| col       |
+-----------+
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
| [1, 2, 3] |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             c,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             c,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[c,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[c,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[s_int,
             c,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[s_int,
             c,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             c,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 2, 3]       |
| [1, null, 3]    |
| [2, 1, 3]       |
| [2, 2, 3]       |
| [2, null, 3]    |
| [null, 1, 3]    |
| [null, 2, 3]    |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[s_int,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B1_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array[s_int,
             s_int,
             3] AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array[s_int,
             s_int,
             3]<array[99999]);
+-----------------+
| col             |
+-----------------+
| [1, 1, 3]       |
| [1, 1, 3]       |
| [1, 1, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [2, 2, 3]       |
| [null, null, 3] |
| [null, null, 3] |
| [null, null, 3] |
+-----------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(c)<99999
       OR array_length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(c)<99999
       OR array_length(c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(s_int)<99999
       OR array_length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(s_int)<99999
       OR array_length(s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, c, 3])<99999
       OR array_length(array[c, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, c, 3])<99999
       OR array_length(array[c, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, c, 3])<99999
       OR array_length(array[s_int, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, c, 3])<99999
       OR array_length(array[s_int, c, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, s_int, 3])<99999
       OR array_length(array[c, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[c, s_int, 3])<99999
       OR array_length(array[c, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, s_int, 3])<99999
       OR array_length(array[s_int, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B2_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_length(array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_length(array[s_int, s_int, 3])<99999
       OR array_length(array[s_int, s_int, 3]) IS NULL);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
|   3 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(c, 0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(c, 0)<99999
       OR array_offset(c, 0) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(c, 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(c, 0)<99999
       OR array_offset(c, 0) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(s_int, 0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(s_int, 0)<99999
       OR array_offset(s_int, 0) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(s_int, 0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(s_int, 0)<99999
       OR array_offset(s_int, 0) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[c, c, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, c, 3],0)<99999
       OR array_offset(array[c, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[c, c, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, c, 3],0)<99999
       OR array_offset(array[c, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, c, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, c, 3],0)<99999
       OR array_offset(array[s_int, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, c, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, c, 3],0)<99999
       OR array_offset(array[s_int, c, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[c, s_int, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, s_int, 3],0)<99999
       OR array_offset(array[c, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[c, s_int, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[c, s_int, 3],0)<99999
       OR array_offset(array[c, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, s_int, 3],0) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, s_int, 3],0)<99999
       OR array_offset(array[s_int, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B3_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset(array[s_int, s_int, 3],0) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset(array[s_int, s_int, 3],0)<99999
       OR array_offset(array[s_int, s_int, 3],0) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(c, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(c, 1)<99999
       OR array_ordinal(c, 1) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(c, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(c, 1)<99999
       OR array_ordinal(c, 1) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(s_int, 1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(s_int, 1)<99999
       OR array_ordinal(s_int, 1) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(s_int, 1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(s_int, 1)<99999
       OR array_ordinal(s_int, 1) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, c, 3],1)<99999
       OR array_ordinal(array[c, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, c, 3],1)<99999
       OR array_ordinal(array[c, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, c, 3],1)<99999
       OR array_ordinal(array[s_int, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, c, 3],1)<99999
       OR array_ordinal(array[s_int, c, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, s_int, 3],1)<99999
       OR array_ordinal(array[c, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[c, s_int, 3],1)<99999
       OR array_ordinal(array[c, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, s_int, 3],1)<99999
       OR array_ordinal(array[s_int, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B4_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal(array[s_int, s_int, 3],1)<99999
       OR array_ordinal(array[s_int, s_int, 3],1) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   2 |
|   2 |
|   2 |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(c,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(c,array[1, 2, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(c,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(c,array[1, 2, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(s_int,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(s_int,array[1, 2, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(s_int,array[1, 2, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(s_int,array[1, 2, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],c) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],c) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],s_int) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],s_int) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],c) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],c) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],s_int) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],s_int) IS NOT NULL);
Invalid expression
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],1) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],1) IS NOT NULL);
+-------+
| col   |
+-------+
| false |
| false |
| false |
| false |
| false |
| false |
| true  |
| true  |
| true  |
+-------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],array[c, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C11_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, c, 3],array[c, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],array[s_int, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C12_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, c, 3],array[s_int, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C13_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B5_C14_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_contains(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_contains(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c, s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c, s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int, c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int, c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, c, 3],c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, c, 3],c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, c, 3],s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, c, 3],s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],c) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],s_int) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c,array[c, c, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c,array[c, c, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int,array[s_int, c, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int,array[s_int, c, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c,array[c, s_int, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(c,array[c, s_int, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int,array[s_int, s_int, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(s_int,array[s_int, s_int, 3]) IS NOT NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, c, 3],array[c, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C11_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, c, 3],array[c, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, c, 3],array[s_int, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C12_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, c, 3],array[s_int, c, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C13_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[c, s_int, 3],array[c, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B6_C14_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_overlap(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NOT NULL);
+------+
| col  |
+------+
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
| true |
+------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c, s_int)<99999
       OR array_offset_of(c, s_int) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c, s_int)<99999
       OR array_offset_of(c, s_int) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int, c)<99999
       OR array_offset_of(s_int, c) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int, c)<99999
       OR array_offset_of(s_int, c) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],c)<99999
       OR array_offset_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],c)<99999
       OR array_offset_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],s_int)<99999
       OR array_offset_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],s_int)<99999
       OR array_offset_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],c)<99999
       OR array_offset_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],c)<99999
       OR array_offset_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],s_int)<99999
       OR array_offset_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],s_int)<99999
       OR array_offset_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
|   0 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, c, 3])<99999
       OR array_offset_of(c,array[c, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, c, 3])<99999
       OR array_offset_of(c,array[c, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, c, 3])<99999
       OR array_offset_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, c, 3])<99999
       OR array_offset_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, s_int, 3])<99999
       OR array_offset_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(c,array[c, s_int, 3])<99999
       OR array_offset_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, s_int, 3])<99999
       OR array_offset_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(s_int,array[s_int, s_int, 3])<99999
       OR array_offset_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_offset_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C11_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_offset_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C12_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_offset_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C13_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_offset_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B7_C14_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_offset_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c, s_int)<99999
       OR array_ordinal_of(c, s_int) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c, s_int)<99999
       OR array_ordinal_of(c, s_int) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int, c)<99999
       OR array_ordinal_of(s_int, c) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int, c)<99999
       OR array_ordinal_of(s_int, c) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],c)<99999
       OR array_ordinal_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],c)<99999
       OR array_ordinal_of(array[c, c, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, c, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],c)<99999
       OR array_ordinal_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],c)<99999
       OR array_ordinal_of(array[c, s_int, 3],c) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],s_int)<99999
       OR array_ordinal_of(array[s_int, s_int, 3],s_int) IS NULL);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
|   1 |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, c, 3])<99999
       OR array_ordinal_of(c,array[c, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, c, 3])<99999
       OR array_ordinal_of(c,array[c, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, c, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, c, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, c, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, s_int, 3])<99999
       OR array_ordinal_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(c,array[c, s_int, 3])<99999
       OR array_ordinal_of(c,array[c, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, s_int, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(s_int,array[s_int, s_int, 3])<99999
       OR array_ordinal_of(s_int,array[s_int, s_int, 3]) IS NULL);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_ordinal_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C11_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, c, 3],array[c, c, 3])<99999
       OR array_ordinal_of(array[c, c, 3],array[c, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C12_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3])<99999
       OR array_ordinal_of(array[s_int, c, 3],array[s_int, c, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C13_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3])<99999
       OR array_ordinal_of(array[c, s_int, 3],array[c, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B8_C14_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3])<99999
       OR array_ordinal_of(array[s_int, s_int, 3],array[s_int, s_int, 3]) IS NULL);
second argument must be
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, c, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(c,array[c, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 2, 3]          |
| [1, 1, null, 3]       |
| [2, 2, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, null, 3]       |
| [null, null, 1, 3]    |
| [null, null, 2, 3]    |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [1, 1, 1, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [2, 2, 2, 3]          |
| [null, null, null, 3] |
| [null, null, null, 3] |
| [null, null, null, 3] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C11_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C12_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C13_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B9_C14_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_prepend(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],c)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 2, 3, 1]          |
| [1, null, 3, 1]       |
| [2, 1, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, null, 3, 2]       |
| [null, 1, 3, null]    |
| [null, 2, 3, null]    |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
+-----------------------+
| col                   |
+-----------------------+
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [1, 1, 3, 1]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [2, 2, 3, 2]          |
| [null, null, 3, null] |
| [null, null, 3, null] |
| [null, null, 3, null] |
+-----------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int,array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int,array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(c,array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C11_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C12_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C13_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B10_C14_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_append(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_append(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c, s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c, s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c, s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int, c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int, c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int, c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, c, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, c, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, c, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, c, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, s_int, 3],c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, s_int, 3],c)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, s_int, 3],s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, s_int, 3],s_int)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c,array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c,array[c, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int,array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int,array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int,array[s_int, c, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c,array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(c,array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(c,array[c, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(s_int,array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(s_int,array[s_int, s_int, 3])<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C11_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, c, 3],array[c, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, c, 3],array[c, c, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 2, 3, 1, 2, 3]             |
| [1, null, 3, 1, null, 3]       |
| [2, 1, 3, 2, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, null, 3, 2, null, 3]       |
| [null, 1, 3, null, 1, 3]       |
| [null, 2, 3, null, 2, 3]       |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C12_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, c, 3],array[s_int, c, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, c, 3],array[s_int, c, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 2, 3, 1, 2, 3]             |
| [1, null, 3, 1, null, 3]       |
| [2, 1, 3, 2, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, null, 3, 2, null, 3]       |
| [null, 1, 3, null, 1, 3]       |
| [null, 2, 3, null, 2, 3]       |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 2, 3, 1, 2, 3]             |
| [1, null, 3, 1, null, 3]       |
| [2, 1, 3, 2, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, null, 3, 2, null, 3]       |
| [null, 1, 3, null, 1, 3]       |
| [null, 2, 3, null, 2, 3]       |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C13_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[c, s_int, 3],array[c, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[c, s_int, 3],array[c, s_int, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 2, 3, 1, 2, 3]             |
| [1, null, 3, 1, null, 3]       |
| [2, 1, 3, 2, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, null, 3, 2, null, 3]       |
| [null, 1, 3, null, 1, 3]       |
| [null, 2, 3, null, 2, 3]       |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B11_C14_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat(array[s_int, s_int, 3],array[s_int, s_int, 3]) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_concat(array[s_int, s_int, 3],array[s_int, s_int, 3])<ARRAY[99999]);
+--------------------------------+
| col                            |
+--------------------------------+
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [1, 1, 3, 1, 1, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [2, 2, 3, 2, 2, 3]             |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
| [null, null, 3, null, null, 3] |
+--------------------------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(c, 1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(c, 1, 2)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(c, 1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(c, 1, 2)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(s_int, 1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(s_int, 1, 2)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(s_int, 1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(s_int, 1, 2)<ARRAY[99999]);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[c, c, 3],1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[c, c, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[c, c, 3],1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[c, c, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[s_int, c, 3],1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[s_int, c, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[s_int, c, 3],1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[s_int, c, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[c, s_int, 3],1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[c, s_int, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[c, s_int, 3],1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[c, s_int, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[s_int, s_int, 3],1, 2) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[s_int, s_int, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B12_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_slice(array[s_int, s_int, 3],1, 2) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_slice(array[s_int, s_int, 3],1, 2)<ARRAY[99999]);
+--------+
| col    |
+--------+
| [1]    |
| [1]    |
| [1]    |
| [2]    |
| [2]    |
| [2]    |
| [null] |
| [null] |
| [null] |
+--------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(c, '|')<'0'
       OR array_to_string(c, '|')>'0');
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(c, '|')<'0'
       OR array_to_string(c, '|')>'0');
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(s_int, '|')<'0'
       OR array_to_string(s_int, '|')>'0');
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(s_int, '|')<'0'
       OR array_to_string(s_int, '|')>'0');
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[c, c, 3],'|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[c, c, 3],'|')<'0'
       OR array_to_string(array[c, c, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|1|3       |
| 1|1|3       |
| 2|2|3       |
| 2|2|3       |
| 2|2|3       |
| null|null|3 |
| null|null|3 |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[c, c, 3],'|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[c, c, 3],'|')<'0'
       OR array_to_string(array[c, c, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|1|3       |
| 1|1|3       |
| 2|2|3       |
| 2|2|3       |
| 2|2|3       |
| null|null|3 |
| null|null|3 |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[s_int, c, 3],'|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[s_int, c, 3],'|')<'0'
       OR array_to_string(array[s_int, c, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|2|3       |
| 1|null|3    |
| 2|1|3       |
| 2|2|3       |
| 2|null|3    |
| null|1|3    |
| null|2|3    |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[s_int, c, 3],'|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[s_int, c, 3],'|')<'0'
       OR array_to_string(array[s_int, c, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|2|3       |
| 1|null|3    |
| 2|1|3       |
| 2|2|3       |
| 2|null|3    |
| null|1|3    |
| null|2|3    |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[c, s_int, 3],'|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[c, s_int, 3],'|')<'0'
       OR array_to_string(array[c, s_int, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|2|3       |
| 1|null|3    |
| 2|1|3       |
| 2|2|3       |
| 2|null|3    |
| null|1|3    |
| null|2|3    |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[c, s_int, 3],'|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[c, s_int, 3],'|')<'0'
       OR array_to_string(array[c, s_int, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|2|3       |
| 1|null|3    |
| 2|1|3       |
| 2|2|3       |
| 2|null|3    |
| null|1|3    |
| null|2|3    |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[s_int, s_int, 3],'|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[s_int, s_int, 3],'|')<'0'
       OR array_to_string(array[s_int, s_int, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|1|3       |
| 1|1|3       |
| 2|2|3       |
| 2|2|3       |
| 2|2|3       |
| null|null|3 |
| null|null|3 |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B13_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_string(array[s_int, s_int, 3],'|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_string(array[s_int, s_int, 3],'|')<'0'
       OR array_to_string(array[s_int, s_int, 3],'|')>'0');
+-------------+
| col         |
+-------------+
| 1|1|3       |
| 1|1|3       |
| 1|1|3       |
| 2|2|3       |
| 2|2|3       |
| 2|2|3       |
| null|null|3 |
| null|null|3 |
| null|null|3 |
+-------------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c, '|')<ARRAY['99999']
       OR string_to_array(c, ',') IS NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c, '|')<ARRAY['99999']
       OR string_to_array(c, ',') IS NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int, '|')<ARRAY['99999']
       OR string_to_array(s_int, ',') IS NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int, '|')<ARRAY['99999']
       OR string_to_array(s_int, ',') IS NULL);
+-----+
| col |
+-----+
| [1] |
| [1] |
| [1] |
| [2] |
| [2] |
| [2] |
|     |
|     |
|     |
+-----+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c||','||c||','||3, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c||','||c||','||3, '|')<ARRAY['99999']
       OR string_to_array(c||','||c||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c||','||c||','||3, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c||','||c||','||3, '|')<ARRAY['99999']
       OR string_to_array(c||','||c||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int||','||c||','||3, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int||','||c||','||3, ',')<ARRAY['99999']
       OR string_to_array(s_int||','||c||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 2, 3] |
| [2, 1, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int||','||c||','||3, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int||','||c||','||3, ',')<ARRAY['99999']
       OR string_to_array(s_int||','||c||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 2, 3] |
| [2, 1, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c||','||s_int||','||3, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c||','||s_int||','||3, ',')<ARRAY['99999']
       OR string_to_array(c||','||s_int||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 2, 3] |
| [2, 1, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(c||','||s_int||','||3, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(c||','||s_int||','||3, ',')<ARRAY['99999']
       OR string_to_array(c||','||s_int||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 2, 3] |
| [2, 1, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int||','||s_int||','||3, ',') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int||','||s_int||','||3, ',')<ARRAY['99999']
       OR string_to_array(s_int||','||s_int||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B14_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_to_array(s_int||','||s_int||','||3, ',') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (string_to_array(s_int||','||s_int||','||3, ',')<ARRAY['99999']
       OR string_to_array(s_int||','||s_int||','||3, ',') IS NULL);
+-----------+
| col       |
+-----------+
| [1, 1, 3] |
| [1, 1, 3] |
| [1, 1, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
| [2, 2, 3] |
|           |
|           |
|           |
+-----------+
(9 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_mv(c) IS NOT NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_mv(c) IS NOT NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_mv(s_int) IS NOT NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_array_funcs TEST_ID: A1_B15_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_to_mv(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE (s_int IN (0,
                 1,
                 2)
       OR s_int IS NULL)
  AND (array_to_mv(s_int) IS NOT NULL);
+-----+
| col |
+-----+
| 1   |
| 1   |
| 1   |
| 2   |
| 2   |
| 2   |
+-----+
(6 rows)

!ok

#-------------------------------------------------------------------------
# Total query count 283 Positive tests: 135 Negative tests: 148
#-------------------------------------------------------------------------
