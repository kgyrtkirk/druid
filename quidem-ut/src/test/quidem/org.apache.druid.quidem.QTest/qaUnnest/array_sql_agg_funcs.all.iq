!set dartQueryId 00000000-0000-0000-0000-000000000000
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=AllDruidEnginesComponentSupplier&datasets=sql/src/test/quidem/qatests/qaUnnest/array
!set outputformat mysql
SELECT *
FROM test_unnest;
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| __time                  | s_int | s_null | a_bool       | a_int        | a_float          | a_str          | a_null             | a_empty | a_mixed                  | a_nested                                                                                                                                                                                                                                                                                                                      |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| 2022-01-01 00:00:00.000 |     1 |        | [1, 0, null] | [1, 2, null] | [0.1, 0.2, null] | [S1, S2, null] | [null, null, null] | []      | [true, 1, 0.1, S1, null] | [[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null],[[true,false,null],[1,2,null],[0.1,0.2,null],["S1","S2",null],[null,null,null],[],[true,1,0.1,"S1",null]]]] |
| 2022-02-01 00:00:00.000 |     2 |        | [null, 1, 0] | [null, 1, 2] | [null, 0.1, 0.2] | [null, S1, S2] | [null, null, null] | []      | [null, true, 1, 0.1, S1] | [[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"],[[null,true,false],[null,1,2],[null,0.1,0.2],[null,"S1","S2"],[null,null,null],[],[null,true,1,0.1,"S1"]]]] |
| 2022-03-01 00:00:00.000 |       |        | [0, null, 1] | [2, null, 1] | [0.2, null, 0.1] | [S2, null, S1] | [null, null, null] | []      | [S1, null, true, 1, 0.1] | [[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1],[[false,null,true],[2,null,1],[0.2,null,0.1],["S2",null,"S1"],[null,null,null],[],["S1",null,true,1,0.1]]]] |
+-------------------------+-------+--------+--------------+--------------+------------------+----------------+--------------------+---------+--------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(*) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(*) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(*) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(*) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(DISTINCT c) IN (0,
                             1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(DISTINCT c) IN (0,
                             1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(DISTINCT c) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(DISTINCT c) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(DISTINCT s_int) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING count(DISTINCT s_int) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(DISTINCT s_int) IN (0,
                                 1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING count(DISTINCT s_int) IN (0,
                                 1);
+-----+
| col |
+-----+
|   0 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   9 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   6 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   6 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   6 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   6 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING sum(c) IN (3,
                  6);
+-----+
| col |
+-----+
|   3 |
|   6 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING sum(c) IN (3,
                  6);
+-----+
| col |
+-----+
|   3 |
|   6 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING sum(c) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING sum(c) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING sum(s_int) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING sum(s_int) IN (3);
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING sum(s_int) IN (3,
                      6);
+-----+
| col |
+-----+
|   3 |
|   6 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT sum(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING sum(s_int) IN (3,
                      6);
+-----+
| col |
+-----+
|   3 |
|   6 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING min(c) IN (1,
                  2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING min(c) IN (1,
                  2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING min(c) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING min(c) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING min(s_int) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING min(s_int) IN (1);
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING min(s_int) IN (1,
                      2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT min(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING min(s_int) IN (1,
                      2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING max(c) IN (1,
                  2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING max(c) IN (1,
                  2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING max(c) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING max(c) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING max(s_int) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING max(s_int) IN (2);
+-----+
| col |
+-----+
|   2 |
|   2 |
|   2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING max(s_int) IN (1,
                      2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT max(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING max(s_int) IN (1,
                      2);
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING avg(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING avg(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING avg(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(c) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING avg(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING avg(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING avg(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
|   1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING avg(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT cast(avg(s_int) AS int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING avg(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct_builtin(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct_builtin(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING approx_count_distinct_builtin(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct_builtin(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT approx_count_distinct_builtin(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING approx_count_distinct_builtin(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING earliest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT earliest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING earliest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(c, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(c, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest(s_int, 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest(s_int, 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(c, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D')) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(s_int, time_floor(__time, 'P1D')) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(c, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(c, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING latest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT latest_by(s_int, time_floor(__time, 'P1D'), 100) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING latest_by(s_int, time_floor(__time, 'P1D'), 100) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL);
+-----+
| cnt |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(c) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING any_value(c) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING any_value(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY c
   HAVING any_value(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(a_int) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING any_value(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) cnt
FROM
  (SELECT any_value(s_int) AS col
   FROM test_unnest,
        unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
   WHERE s_int IN (0,
                   1,
                   2)
     OR s_int IS NULL
   GROUP BY s_int
   HAVING any_value(s_int) IS NOT NULL);
+-----+
| cnt |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING grouping(c) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING grouping(c) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING grouping(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT c col,
       count(*) cnt,
       grouping(c) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING grouping(c) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING grouping(s_int) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING grouping(s_int) IS NOT NULL;
QueryInterruptedException
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING grouping(s_int) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT s_int col,
       count(*) cnt,
       grouping(s_int) gp
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING grouping(s_int) IS NOT NULL;
+-----+-----+----+
| col | cnt | gp |
+-----+-----+----+
|   1 |   3 |  0 |
|   2 |   3 |  0 |
|     |   3 |  0 |
+-----+-----+----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [1, 2, null, null, 1, 2, 2, null, 1] |
+--------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [1, 2, null, null, 1, 2, 2, null, 1] |
+--------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [1, 1, 1, 2, 2, 2, null, null, null] |
+--------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| [1, 1, 1, 2, 2, 2, null, null, null] |
+--------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [2, null, 1] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [2, null, 1] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(c) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(c) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(c) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [2, null, 1] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(c) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [2, null, 1] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(s_int) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(s_int) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [1, 2, null] |
| [1, 2, null] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(s_int) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B27_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(s_int) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [1, 1, 1]          |
| [2, 2, 2]          |
| [null, null, null] |
+--------------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(DISTINCT c) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(DISTINCT s_int) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_agg(DISTINCT s_int) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(DISTINCT s_int) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B28_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_agg(DISTINCT s_int) IS NOT NULL;
+--------+
| col    |
+--------+
| [1]    |
| [2]    |
| [null] |
+--------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C2_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C3_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT c) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10_D2 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING array_concat_agg(DISTINCT s_int) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|2|1|2|2|1 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|2|1|2|2|1 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|1|1|2|2|2 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-------------+
| col         |
+-------------+
| 1|1|1|2|2|2 |
+-------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
|       |
+-------+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(c, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(c, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 2|1 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(s_int, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B31_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(s_int, '|') IS NOT NULL;
+-------+
| col   |
+-------+
| 1|1|1 |
| 2|2|2 |
+-------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
| 1|2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
| 1|2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
| 1|2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
| 1|2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1   |
| 2   |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1   |
| 2   |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1   |
| 2   |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
| 1   |
| 2   |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1   |
| 2   |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1   |
| 2   |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT c, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(DISTINCT c, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(DISTINCT s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING string_agg(DISTINCT s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1|2 |
| 1|2 |
| 1|2 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(DISTINCT s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1   |
| 2   |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B32_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT string_agg(DISTINCT s_int, '|') AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING string_agg(DISTINCT s_int, '|') IS NOT NULL;
+-----+
| col |
+-----+
| 1   |
| 2   |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   0 |
|   0 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_and(c) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_and(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_and(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
|   0 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_and(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_and(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
|   0 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_or(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_or(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_or(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_or(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_or(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C1_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C2_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL;
+-----+
| col |
+-----+
|   3 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C3_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C4_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C5_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C6_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int;
+-----+
| col |
+-----+
|   1 |
|   2 |
|     |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C7_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C8_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(c) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_xor(c) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_xor(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C9_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY c
HAVING bit_xor(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   3 |
|   3 |
|   3 |
+-----+
(3 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(a_int) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_xor(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C10_D2 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(s_int) AS col
FROM test_unnest,
     unnest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS u(c)
WHERE s_int IN (0,
                1,
                2)
  OR s_int IS NULL
GROUP BY s_int
HAVING bit_xor(s_int) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# Total query count 531 Positive tests: 479 Negative tests: 52
#-------------------------------------------------------------------------
