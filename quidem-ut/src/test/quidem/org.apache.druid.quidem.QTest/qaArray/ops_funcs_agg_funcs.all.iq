!set dartQueryId 00000000-0000-0000-0000-000000000000
!set useApproximateCountDistinct false
!use druidtest://?componentSupplier=AllDruidEnginesComponentSupplier&datasets=sql/src/test/quidem/qatests/qaArray/ops_funcs
!set outputformat mysql
SELECT count(*) cnt
FROM test_array;
+-----+
| cnt |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING count(*) IS NOT NULL;
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
+-----+
| col |
+-----+
|   2 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING count(*)IS NOT NULL;
+-----+
| col |
+-----+
|   2 |
|   2 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B1_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(*) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING count(*) IN (4);
+-----+
| col |
+-----+
|   4 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING count(DISTINCT json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING count(DISTINCT json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING count(DISTINCT json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
+-----+
| col |
+-----+
|   1 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   1 |
|   1 |
+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B2_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT count(DISTINCT json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING count(DISTINCT json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|   0 |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING sum(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING sum(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING sum(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B3_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT sum(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING sum(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING min(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING min(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING min(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B4_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT min(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING min(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING max(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING max(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING max(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B5_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT max(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING max(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
does not support
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING avg(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING avg(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING avg(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B6_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT avg(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING avg(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B7_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING approx_count_distinct(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B8_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT approx_count_distinct_builtin(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING approx_count_distinct_builtin(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING earliest(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING earliest(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING earliest(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B17_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[0]' RETURNING boolean array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING earliest(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[1]' RETURNING bigint array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING earliest(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[2]' RETURNING decimal array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING earliest(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1000) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[3]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1000) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[4]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1000) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[5]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1000) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[6]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1000) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(a_nested, 1000) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B18_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING earliest(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1000) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[0]' RETURNING boolean array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING earliest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[1]' RETURNING bigint array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING earliest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[2]' RETURNING decimal array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING earliest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D')) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[3]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[4]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[5]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[6]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(a_nested, time_floor(__time, 'P1D')) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B19_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING earliest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING earliest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING earliest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(a_nested, time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B20_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT earliest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING earliest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING latest(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING latest(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING latest(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT latest(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B21_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[0]' RETURNING boolean array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING latest(json_value(a_nested, '$[7][0]' RETURNING boolean array), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[1]' RETURNING bigint array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING latest(json_value(a_nested, '$[7][1]' RETURNING bigint array), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[2]' RETURNING decimal array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING latest(json_value(a_nested, '$[7][2]' RETURNING decimal array), 1000) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[3]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][3]' RETURNING varchar array), 1000) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[4]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][4]' RETURNING varchar array), 1000) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[5]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][5]' RETURNING varchar array), 1000) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[6]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][6]' RETURNING varchar array), 1000) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT latest(a_nested, 1000) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B22_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING latest(json_value(a_nested, '$[7][7]' RETURNING varchar array), 1000) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[0]' RETURNING boolean array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING latest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[1]' RETURNING bigint array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING latest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[2]' RETURNING decimal array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING latest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D')) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[3]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[4]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[5]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[6]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(a_nested, time_floor(__time, 'P1D')) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B23_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D')) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D')) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING latest_by(json_value(a_nested, '$[7][0]' RETURNING boolean array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING latest_by(json_value(a_nested, '$[7][1]' RETURNING bigint array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING latest_by(json_value(a_nested, '$[7][2]' RETURNING decimal array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][3]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][4]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][5]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][6]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(a_nested, time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B24_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT latest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING latest_by(json_value(a_nested, '$[7][7]' RETURNING varchar array), time_floor(__time, 'P1D'), 1000) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C2_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C3_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING any_value(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 0, null] |
| [null, 0, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING any_value(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [1, 2, null] |
| [null, 2, 1] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING any_value(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [0.1, 0.2, null] |
| [null, 0.2, 0.1] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [S1, S2, null] |
| [null, S2, S1] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------+
| col                |
+--------------------+
| [null, null, null] |
+--------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B25_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT any_value(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING any_value(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_bool AS col1,
       grouping(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_int AS col1,
       grouping(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[1]' RETURNING bigint array) AS col1,
       grouping(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+-----+
| col1         | col |
+--------------+-----+
| [1, 2, null] |   0 |
| [null, 2, 1] |   0 |
+--------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][1]' RETURNING bigint array) AS col1,
       grouping(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING grouping(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+-----+
| col1         | col |
+--------------+-----+
| [1, 2, null] |   0 |
| [null, 2, 1] |   0 |
+--------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_float AS col1,
       grouping(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[2]' RETURNING decimal array) AS col1,
       grouping(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+-----+
| col1             | col |
+------------------+-----+
| [0.1, 0.2, null] |   0 |
| [null, 0.2, 0.1] |   0 |
+------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][2]' RETURNING decimal array) AS col1,
       grouping(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING grouping(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+-----+
| col1             | col |
+------------------+-----+
| [0.1, 0.2, null] |   0 |
| [null, 0.2, 0.1] |   0 |
+------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_str AS col1,
       grouping(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[3]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+-----+
| col1           | col |
+----------------+-----+
| [S1, S2, null] |   0 |
| [null, S2, S1] |   0 |
+----------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][3]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+-----+
| col1           | col |
+----------------+-----+
| [S1, S2, null] |   0 |
| [null, S2, S1] |   0 |
+----------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_null AS col1,
       grouping(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[4]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------+-----+
| col1               | col |
+--------------------+-----+
| [null, null, null] |   0 |
+--------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][4]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------+-----+
| col1               | col |
+--------------------+-----+
| [null, null, null] |   0 |
+--------------------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_empty AS col1,
       grouping(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[5]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+------+-----+
| col1 | col |
+------+-----+
| []   |   0 |
+------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][5]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+------+-----+
| col1 | col |
+------+-----+
| []   |   0 |
+------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_mixed AS col1,
       grouping(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
may only occur in an aggregate query
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[6]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+-----+
| col1                     | col |
+--------------------------+-----+
| [null, S1, 0.1, 1, true] |   0 |
| [true, 1, 0.1, S1, null] |   0 |
+--------------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][6]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+-----+
| col1                     | col |
+--------------------------+-----+
| [null, S1, 0.1, 1, true] |   0 |
| [true, 1, 0.1, S1, null] |   0 |
+--------------------------+-----+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT a_nested AS col1,
       grouping(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+------+-----+
| col1 | col |
+------+-----+
|      |   0 |
+------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B26_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT json_value(a_nested, '$[7][7]' RETURNING varchar array) AS col1,
       grouping(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING grouping(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+------+-----+
| col1 | col |
+------+-----+
|      |   0 |
+------+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
+--------------------------+
| col                      |
+--------------------------+
| [null, 0, 1, null, 0, 1] |
+--------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
+--------------------------+
| col                      |
+--------------------------+
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------------------+
| col                      |
+--------------------------+
| [1, 2, null, 1, 2, null] |
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING array_concat_agg(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [1, 2, null, 1, 2, null] |
| [null, 2, 1, null, 2, 1] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
+----------------------------------+
| col                              |
+----------------------------------+
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+----------------------------------+
| col                              |
+----------------------------------+
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING array_concat_agg(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+----------------------------------+
| col                              |
+----------------------------------+
| [0.1, 0.2, null, 0.1, 0.2, null] |
| [null, 0.2, 0.1, null, 0.2, 0.1] |
+----------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
+------------------------------+
| col                          |
+------------------------------+
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+------------------------------+
| col                          |
+------------------------------+
| [S1, S2, null, S1, S2, null] |
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+------------------------------+
| col                          |
+------------------------------+
| [S1, S2, null, S1, S2, null] |
| [null, S2, S1, null, S2, S1] |
+------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------------------------------------------------------------------------+
| col                                                                      |
+--------------------------------------------------------------------------+
| [null, null, null, null, null, null, null, null, null, null, null, null] |
+--------------------------------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------------------------------------------------------------------------+
| col                                                                      |
+--------------------------------------------------------------------------+
| [null, null, null, null, null, null, null, null, null, null, null, null] |
+--------------------------------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
+--------------------------------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
+--------------------------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------------------------------+
| col                                              |
+--------------------------------------------------+
| [null, S1, 0.1, 1, true, null, S1, 0.1, 1, true] |
| [true, 1, 0.1, S1, null, true, 1, 0.1, S1, null] |
+--------------------------------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B29_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING array_concat_agg(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C1_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
+--------------+
| col          |
+--------------+
| [null, 0, 1] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C4_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
+--------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C5_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C6_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
+--------------+
| col          |
+--------------+
| [null, 1, 2] |
| [null, 1, 2] |
+--------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C7_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
+------------------+
| col              |
+------------------+
| [null, 0.1, 0.2] |
+------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C8_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
+------------------+
| col              |
+------------------+
| [null, 0.1, 0.2] |
| [null, 0.1, 0.2] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C9_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
+------------------+
| col              |
+------------------+
| [null, 0.1, 0.2] |
| [null, 0.1, 0.2] |
+------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C10_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
+----------------+
| col            |
+----------------+
| [null, S1, S2] |
+----------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C11_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
+----------------+
| col            |
+----------------+
| [null, S1, S2] |
| [null, S1, S2] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C12_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
+----------------+
| col            |
+----------------+
| [null, S1, S2] |
| [null, S1, S2] |
+----------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C13_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C14_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
+--------+
| col    |
+--------+
| [null] |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C15_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
+--------+
| col    |
+--------+
| [null] |
+--------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C16_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C17_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C18_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
| []  |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C19_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
+--------------------------+
| col                      |
+--------------------------+
| [null, 0.1, 1, S1, true] |
+--------------------------+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C20_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
+--------------------------+
| col                      |
+--------------------------+
| [null, 0.1, 1, S1, true] |
| [null, 0.1, 1, S1, true] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C21_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
+--------------------------+
| col                      |
+--------------------------+
| [null, 0.1, 1, S1, true] |
| [null, 0.1, 1, S1, true] |
+--------------------------+
(2 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C23_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
+-----+
| col |
+-----+
|     |
+-----+
(1 row)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B30_C24_D1 TYPE: POSITIVE TEST
#-------------------------------------------------------------------------
SELECT array_concat_agg(DISTINCT json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING array_concat_agg(DISTINCT json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
+-----+
| col |
+-----+
+-----+
(0 rows)

!ok

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING bit_and(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING bit_and(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING bit_and(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B33_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_and(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING bit_and(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING bit_or(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING bit_or(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING bit_or(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B34_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_or(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING bit_or(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C1_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_bool) AS col
FROM test_array
WHERE a_bool<>ARRAY[1,
                    0,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C2_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[0]' RETURNING boolean array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C3_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][0]' RETURNING boolean array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][0]' RETURNING boolean array)
HAVING bit_xor(json_value(a_nested, '$[7][0]' RETURNING boolean array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C4_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_int) AS col
FROM test_array
WHERE a_int<>ARRAY[1,
                   2,
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C5_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[1]' RETURNING bigint array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C6_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][1]' RETURNING bigint array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][1]' RETURNING bigint array)
HAVING bit_xor(json_value(a_nested, '$[7][1]' RETURNING bigint array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C7_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_float) AS col
FROM test_array
WHERE a_float<>ARRAY[0.1,
                     0.2,
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C8_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[2]' RETURNING decimal array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C9_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][2]' RETURNING decimal array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][2]' RETURNING decimal array)
HAVING bit_xor(json_value(a_nested, '$[7][2]' RETURNING decimal array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C10_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_str) AS col
FROM test_array
WHERE a_str<>ARRAY['S1',
                   'S2',
                   NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C11_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[3]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C12_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][3]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][3]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][3]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C13_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_null) AS col
FROM test_array
WHERE a_null<>ARRAY[NULL,
                    NULL,
                    NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C14_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[4]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C15_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][4]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][4]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][4]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C16_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_empty) AS col
FROM test_array
WHERE a_empty<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C17_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[5]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C18_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][5]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][5]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][5]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C19_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_mixed) AS col
FROM test_array
WHERE a_mixed<>ARRAY['true',
                     '1',
                     '0.1',
                     'S1',
                     NULL];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C20_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[6]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C21_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][6]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][6]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][6]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C22_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(a_nested) AS col
FROM test_array
WHERE a_nested<>ARRAY['FILLER'];
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C23_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7]' RETURNING varchar array);
Cannot apply
!error

#-------------------------------------------------------------------------
# TESTCASE: test_agg_funcs TEST_ID: A1_B35_C24_D1 TYPE: NEGATIVE TEST
#-------------------------------------------------------------------------
SELECT bit_xor(json_value(a_nested, '$[7][7]' RETURNING varchar array)) AS col
FROM test_array
GROUP BY json_value(a_nested, '$[7][7]' RETURNING varchar array)
HAVING bit_xor(json_value(a_nested, '$[7][7]' RETURNING varchar array)) IS NOT NULL;
Cannot apply
!error

#-------------------------------------------------------------------------
# Total query count 476 Positive tests: 247 Negative tests: 229
#-------------------------------------------------------------------------
